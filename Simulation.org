* Setting up the Simulation
** Random Distribution of Points on a sphere
Choose $u$ and $v$ from uniform distribution in $[0,1]$
To obtain the angles use formulas:
$$\begin{align}\theta &= 2\pi u \\
\phi &= \arccos(2v -1)\end{align}$$
Source: [[http://mathworld.wolfram.com/SpherePointPicking.html][MathWorld]]

** Evenly Distribution by Fibonacci Sphere Algorithm
[[https://stackoverflow.com/questions/9600801/evenly-distributing-n-points-on-a-sphere][StackOverflow Source]]
** Spacecraft coordinates
From Trigdata we can get

: RA_SCX  =             198.1504 / [deg] Pointing of spacecraft x-axis: RA        
: DEC_SCX =               2.8766 / [deg] Pointing of spacecraft x-axis: Dec       
: RA_SCZ  =             279.3483 / [deg] Pointing of spacecraft z-axis: RA        
: DEC_SCZ =             -71.8215 / [deg] Pointing of spacecraft z-axis: Dec  


[[file:~/venv/lib/python2.7/site-packages/gbmgeometry-0.1.2-py2.7.egg/gbmgeometry/gbm.py::xyz_position%20=%20coord.SkyCoord(x=self._sc_pos%5B0%5D,%20y=self._sc_pos%5B1%5D,%20z=self._sc_pos%5B2%5D,%20frame='icrs',%20representation='cartesian')][SkyCoord Introduction of Spacecraft Coordinates]]
Usage of icrs coordinate system

[[file:~/venv/lib/python2.7/site-packages/gbmgeometry-0.1.2-py2.7.egg/gbmgeometry/gbm_frame.py::def%20gbm_to_j2000(gbm_coord,%20j2000_frame):%20"""%20Compute%20the%20transformation%20from%20heliocentric%20Sgr%20coordinates%20to%20spherical%20Galactic.][J2000 and GBM transformation]]

* The Coordinate Systems
** ICRS

** GBM
We need quaternions and spacecraft position from trigdat
